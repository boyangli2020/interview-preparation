CAP原理（分布式系统要实现的目标）：
	Consistency：强一致性，就是说所有的服务器上面的数据都是一样的，（只有一个服务器）
	Availablity：可用性，用户访问服务器上面的数据，响应时间在可以接受的范围内（不需要等待）
	Partition tolerance：分区容忍性，其实就是高可用性，一个节点崩了，并不影响我们其它的节点（多台服务器）

	一个分布式系统CAP只能同时满足两个。一般来讲，分区容错性是必须满足的，也就是一个分布式系统的基本要求时满足高可用。
		CA: 如果放弃P，也就是单节点，那么C和A都是可以保障的。
		CP: 在分布式P的基础上，如果要保证数据一致性，不同节点同步数据需要时间，如果网络不稳定就会影响用户体验，所以不能满足可用性。
		AP: 在分布式P的基础上，如果要保证可用性，每个节点为了保证相应时间，只能用本地当前数据提供服务，但数据可能没有完全在每个节点上进行同步。

BASE理论：
	Basically Available: 基本可用
	Soft state: 软状态，可以有中间状态，如支付中，这样查询时候返回支付中系统还是可用的。
	Eventually consistent: 最终一致性，支付完成后将订单变成成功。
	
	BASE是对CAP中一致性和可用性权衡的结果。源于大规模互联网系统分布式实践的结论。核心是:
		即使无法做到强一致性（Strong Consistency）, 但每个应用可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。

REDIS 默认有16个数据库，角标从0到15，select 5(切换到第6号库)，这样可以通过业务去区分数据库。
	dbsize：查询当前数据库key的数量
	keys *: 查看所有key, 一般别用
	keys my?: 使用通配符查看my大头的所有key
	flushdb: 清空当前库
	flushall: 清空所有的16个库
	

数据类型：
	String字符串：
		String是二进制安全的，意思是可以包含任何数据，比如jpg图片或者序列化的对象。
		一个String类型的value最多是512MB.
		
	Hash哈希：
		string类型的field和value的映射表，hash特别适合存储对象。类似与Java中的Map<String,Object>
	
	List列表：
		简单的字符串列表，按照插入顺序排序，可以添加一个元素到表的头部（左边）或者尾部（尾部）。底层是一个链表。
	
	Set：
		string类型的无序集合，是通过hashtable实现的。
	
	ZSet:
		string类型的集合, 和Set的区别是每个元素都关联了一个double类型的分数。通过分数来对集合中元素进行从小到达的排序。ZSet的成员是唯一的，但是分数score可以重复。

REDIS 1(key)+5(5种数据类型)
		
	
命令：	
	keys *: 列出所有key
	exits keyname:判断某个key是否存在 exits k1
	move key dbname: 将key和对应value从当前库移动到指定的数据库种  move k1 1
	exipre key 时间(秒): 为给定的key设置过期时间 -1永不过期  -2已过期   expire k1 10
	ttl key: 查看还有多少秒过期，ttl time to leave.  ttl k1
	del key: 删除操作
	type key: 查看key的数据类型
	set key value: 设置值
	setex key 时间(秒) 值：set with expire  setex k4 10 v4
	setnx: set if not exit, setnx k1 5, 为了防止覆盖，返回1表示设置成功，0标识设置失败
	
