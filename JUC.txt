----Concurrent 并发：任务调度器将CPU时间片轮流分给线程，线程轮流使用CPU的现象称之为并发。
--------单核下，线程其实是串行执行的。

isInterrupted() 不会清除打断标记
interrupted（）会清除打断标记，park的线程被interupt之后会继续运行，但是再park是park不住的，可以用interrupted()清除打断标记来解决。
interrupt() 
如果被打断线程正在sleep,wait,join, 会导致被打断的线程抛出InterruptedException, 
并清除打断标记。如果打断的正在运行的线程，则会设置打断标记。park的线程被打断，也会设置打断标记。
getState() 6种。NEW, RANNABLE（可运行态，运行状态，阻塞状态）, BLOCKED, WAITING, TIMED_WAITING, TERMINATED. 操作系统五个状态：初始态，可运行态，运行状态，阻塞状态，终止状态
t1.join(), 在哪个线程上调的，就是在调用的线程上等待t1的结束。
stop() 方法会终止一个线程，如果有所资源，则无法释放
setDeamon(true)

两阶段终止-interrupt, 在线程t1种如何优雅的终止t2线程。适用于定时任务，提供打断来终止程序。一般stop方法最好用两阶段提交方式来解决。

守护线程：只要其他非守护线程运行结束，即使守护线程的代码没有执行完，也会强制结束。

临界区：一段代码内如果存在对共享资源的多线程读写操作，称这段代码为临界区
竞态条件：多个线程在临界区内执行，造成指令容易叫做，成为发生了竞太条件。

为了避免临界区的竞态条件发生，使用阻塞时方案（synchronized, lock）, 非阻塞式的（原子变量）

synchronized（用对象锁保证临界区代码的原子性） Monitor(WaitSet, Entrylist, Owner), 属于互斥，非公平锁, 可重入锁。

StringBuilder线程安全。

64位系统 
Object Header（64） = MarkWord（32） + ClassWord（32）
MarkWord:
hashcode25, age4, biased_lock1(0), status2(01)							Normal
thread23, epoch2, age4, biased_lock1(1), status2(01)					Biased Locked
ptr_to_lock_record30, status2(00)										Lightweight Locked
ptr_to_heavyweight_monitor30, status2(01->10)							Heavyweight Locked
空(30) + status2(11)													Marked for GC

轻量级锁
重量级锁
自旋锁（多核CPU下自旋有用）
偏向锁

顺序：启用偏向锁时优先使用偏向锁，如果其他线程用了这把锁，就会撤销偏向锁，编程轻量级锁，如果轻量级锁加了之后有竞争，就会发生锁膨胀，编程重量级锁。

-XX:BiasedLockingStartupDelay = 0 取消偏向锁延迟
-XX:-UseBiasedLocking 禁用偏向锁

如果调用一个对象的hashcode方法，会禁用这个对象的偏向锁，后续给这个对象上synchronized, 会直接加入轻量级锁，因为对象头MarkWord如果存了hashcode就没地方存偏向锁的线程号了。

锁消除：当锁对象没有发生逃逸，只被一个线程锁持有，jvm即时编译器进行锁销除。


wait notify原理即正确姿势
synchronized(lock) {

	while(条件不成立) {
		lock.wait();
	}
	
	//干活
}

synchronized(lock) {
	lock.notifyAll();
}

同步模式之：保护性暂停 	GardedObject
异步模式之：生产者/消费者 -- 消息队列 BlockingQueue

LockSupport.park();
LockSupport.unpark();

Reentrantlock:
	获取锁的过程中可被打断,避免死等： 
		被动可打断：try{lock.lockInterruptibly()}catch(InterruptedException e){} 主动可打断：lock.tryLock()也支持InterruptedException; lock.tryLock(timeout, TimeUnit)
		哲学家问题，先获取左手筷子，如果获取到了获取右手筷子，如果没获取到就释放掉左手筷子的锁。
	可设置超时时间  
		lock.tryLock(timeout, TimeUnit)
	支持多条件,避免虚假唤醒。		
		
	可以设置为公平锁
		公平锁本意是解决饥饿问题。一般不会去设置公平锁，因为会降低并发度。
	
Reentrantlock lock = new Reentrantlock();
Condition condition1 = lock.newCondition();
Condition condition2 = lock.newCondition();

lock.lock();
condition1.await();
condition1.signal();
condition1.signalAll();


线程池
ExecutorService接口
ScheduledExecutorService接口
ThreadPollExecutor
ScheduledThreadPollExecutor

corePoolSize: 核心线程数   核心线程一直存在，不会销毁。一开始线程池里面没有核心线程，核心线程是懒加载。
maximumPoolSize: 最大线程数  maximumPoolSize-corePoolSize等于救急线程数，当核心线程满了，就放到阻塞队列，阻塞队列满了就放到救急线程，救济线程满了就执行拒绝策略。
keepAliveTime: 生存时间，针对救急线程。救急线程执行任务结束后，等待一段时间，如果没有新任务到来就会销毁。
unit: 时间单位，针对救急线程
workQueue: 阻塞队列，如果是无界队列，就没有救急线程，而是等着核心线程取任务。
threadFactory: 县城工厂，可以我i线程创建时起个名字
hanlder: 拒绝策略。

jdk提供的救急策略：
AbortPolicy: 让调用者抛出RejectedExecutionException异常，这是默认策略。
CallerRunsPolicy: 让调用者运行任务。
DiscardPolicy: 放弃本次任务
DiscardOldestPolicy 放弃队列中最早的任务，本人无取而代之。

newFixedThreadPool(int  nThreads): 
	new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())
	LinkedBlockingQueue没有传数字，所以是无界队列，没有临时线程，所以不需要超时时间。
	固定大小线程池，没有救急线程。
	适用于任务量相对比较固定，相对比较耗时的任务。
	有可能产生饥饿问题，比如nThreads是2，员工A点餐等待做好菜后上菜，员工B做菜，这时候两个A类型员工占据了线程池，发现没人做菜了，一直等着。

newCachedThreadPool() 
	new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>())
	SynchronousQueue: 没有容量，没有线程来取是放不进去的。
	全是救急线程，不限救急线程的容量。
	适用于任务数比较密集，每个人物执行时间较短的情况，因为如果任务执行时间长，来一个任务启动一个线程，，会造成线程总数太多，无法控制。

newSingleTheradExecutor()
	new FinalizableDelegatedExecutorService (
		new ThreadPoolExecutor(1,1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())
	)
	单线程线程池，无救急线程，无界队列。
	适用于希望多个任务排队执行。
	和单线程有什么区别？线程池中的线程如果出现异常会新建一个线程继续执行其他任务，这个是所有线程池都会这样做。
	和FixedThreadPool有什么区别? FinalizableDelegatedExecutorService是一个包装类对象，对外只暴露ExecutorService接口中的方法。

提交任务方法：
	void 		execute(Runnable runnable)
	Future<T> 	submit(Callable<T> task)
	List<Future<T>> 	invokeAll(Collection<Callable<T>> tasks)
	T 		invokeAny(Collection<Callable<T>> tasks)
	
	submit方法的原理是使用了保护性暂停的GuardedObject（get方法wait, set方法notifyAll）, 从一个线程中（主线程）接受另一个线程（线程池中线程）执行的结果。
	Future是一个接口，实现类是FutureTask, 这样可以实现在主线程中获取线程池中方法的返回结果。


创建多少线程合适？过少不能充分利用系统资源，还容易产生饥饿现象，过大会导致更多的线程上下文切换，占用更多内存。
	CPU密集型：CPU核数+1，保证当前线程由于页缺失故障（操作系统）或其他原因导致暂停时，额外的这个线程能顶上去，保证CPU时钟周期不被浪费。
	I/O密集型：因为有些线程在做I/O, 线程是阻塞的，那么就可以多创建一些线程，当有些线程阻塞了，可以切换到有需要CPU的线程去
			工作计算，这样就可以充分利用CPU。web应用程序就是I/O密集型运算。
		计算公式：线程数 = 核数 * 期望CPU利用率 * （总时间/CPU计算时间）       总时间：CPU计算时间+I/O时间


Timer的缺点：所有任务都是一个线程调度的，因此所有人物都是串行执行的，同一时间只能由一个任务在执行。
		Timer是一种定时器工具，用来在一个后台线程计划执行指定任务。它可以计划执行一个任务一次或反复多次。一个Timer对象对应一个后台线程。


Tomcat NIO Endpoint:
	LimitLatch负责限流 --> acceptor死循环建立socket连接 --> poller死循环监听socket channel中的读写事件 --> 数据交给Executor线程池中的worker去处理


AQS: AbstractQueuedSynchronizer, 是阻塞式锁和相关同步器工具的框架，由子类去实现。

	用state(在AQS中声明为volatile的成员变量)标识资源的状态子类需要定义如何维护这个状态，控制如何获取锁和释放锁，可以使用AQS提供的compareAndSetState()方法来用CAS方式更新state属性。
	提供基于FIFO的等待队列，类似于Monitor的Entrylist
	多条件变量来实现等待和唤醒机制，类似于Monitor的WaitSet.

	子类主要实现的方法：
		tryAcquire
			AQS中acquire方法使用tryAcquire方式尝试加锁，如果不成功放入阻塞队列。
			
			if(!tryAcquire(arg)) {
				//入队，可以选择阻塞当前线程, 可以使用Park/Unpark
			}
		
		tryRelease
			AQS中release方法使用tryRelease方法尝试解锁，如果成功回去唤醒队列中正在等待锁的线程。
			
			if(tryRelease(arg)) {
				//让阻塞线程恢复运行, 可以使用Park/Unpark
			}
		tryAcquireShared
		tryReleaseShared
		isHeldExclusively


ReentrantLock继承了Lock接口，并内部维护类一个同步器Sync继承AbstractQueuedSynchronizer，Sync是一个抽象类，有两个实现，一个是非公平的一个是公平的。NonfairSync, FairSync.

Lock接口提供的方法：
	lock()
	unlock()
	tryLock()
	newCondition()

ReentrantLock加锁解锁流程：
    	加锁：
		先调用ReentrantLock.lock()方法，里面调用了sync.lock()方法，里面
		if (compareAndSetState(0, 1)) {   //将AbstractQueuedSynchronizer的status属性设置为1，并将owner设置为自己
			setOwner(当前线程) //获取成功
		} else {
	       	   acquire(1) //获取锁失败调用sync父类AbstractQueuedSynchronizer的acquire方法
		}
	
		父类AbstractQueuedSynchronizer的acquire方法
		if(!tryAcquire(arg)) {
			acquireQueued(addWaiter(node))	//入队
		}
	
		acquireQueued方法先判断自己的前驱节点是不是waiter队列的头元素，如果不是直接进入下一行，如果是就尝试获取锁，如果获取成功将自己变成头元素，如果失败
		调用shouldParkAfterFailedAcquire方法，将前驱节点的waitStatus改为-1（新家进来的node的waitStatus默认是0）， 表示前驱节点有责任唤醒自己，人后park进入阻塞

	解锁：
		先调用ReentrantLock.unlock方法，里面调用sync.unlock方法，里面
		if(tryRelease()) {	//将AbstractQueuedSynchronizer的status属性设置为0，并将owner设置为null
			如果当前头节点不是空，且waitStatus!=0, unpark头节点的下一个节点。被唤醒的节点进入上面acuiqreQueued方法继续尝试获取锁。
		} 
